ptest:
	Functionality:
		primality testing for OEIS sequences of prime numbers or groups of SIDH numbers by size and
		methods to do associated i/o
	Methods:
		run_tests - call OEIS primality test or SIDH primality test as appropreate
		OEIS_testing - seive out exponenets that will never be prime and call appropreate primality test
		SIDH_testing - find some primes with bit-length asked for calling section 2 primaity tests as needed
		get_not_to_run_2_8_10 - obtain an array of pairs of integers which can be used to sieve out potential
			primes for use finding OEIS sequences
		get_n_to_run_2_8_10 - get an array of integer exponents that should be tested for primality for OEIS
			sequences
		add_prime_file_OEIS - add exponent that was used to find a prime to the corresponding output file
		add_prime_file_SIDH - add parameters used to find a prime to the corresponding output file
		remove_dup_file - ensure OEIS primes' exponents are unique and sorted
		get_file_name_OEIS - get output file to open for given input
		get_file_name_SIDH - get output file to open for given input
		print_req_args - print user prompt for how to use the program
	
RWG2:
	Functionality:
		Methods not strictly related to Lucas sequences required in primality testing
		for section 2 of Roetteger, Williams and Guys paper 'Some primality tests that
		eluded Lucas' (RWG) including the primality tests themselves
	Methods:
		get_g_r_coef - obtain coefficients for g_r polynomial (RWG theorem 2.4)
		find_p_q - find integer values of p, q (RWG section 1 and theorem 2.8)
		primality_test_2_8 - for finding primes of the form N = Ar^n + y (RWG theorem 2.8)
		primality_test_2_10 - for finding primes of the form N = Ar^n + y (RWG theorem 2.10)

RWG2S:
	Functionality:
		Methods for finding Lucas sequences (quadratic) and related sequences, the methods for finding
		Lucas sequences are also required in section 7 primality testing
	Methods:
		get_s_i - Obtains arbitrary term of S integer sequence (formula from just before RWG theorem 2.5)
		bin_search_s_i - Returns index of first 0 term of S integer sequence using get_s_i
		get_s0 - get first term of S integer sequence (RWG theorem 2.4)
		get_next_s_i - given ith term of S integer sequence gets S_(i+1) (RWG theorem 2.4)
		get_u_i - obtain Lucas sequence (RWG section 1)
		get_uv_i - obtain both Lucas sequences (RWG section 1)
		get_v_i - obtain Lucas sequence (RWG section 1)
		get_r0_r1 - obtain first two terms of R integer sequence (RWG theorem 2.10)

RWG7:
	Functionality:
		Methods not strictly related to Lucas sequences required in primality testing
		for section 7 of Roetteger, Williams and Guys paper 'Some primality tests that
		eluded Lucas' (RWG) including the primality tests themselves
	Methods:
		get_HI_k - obtain values of the polynomials H and I (just before equation 4.1)
		find_QPP_7_2_4 - find appropreate values of P1, P2 and Q integers (RWG theorem 7.2 and 7.4)
		find_QPP_7_5 - find appropreate values of P1, P2 and Q integers (RWG theorem 7.5)
		primality_test_7_2_4 - for finding primes of the form N = Ar^n + eta(y_n(r)) (RWG theorem 7.2 and 7.4)
		primality_test_7_5 - for finding primes of the form N = Ar^n + eta(y_n(r)) (RWG theorem 7.5)

RWG7S:
	Functionality:
		Methods for finding quartic Lucas sequences and quartic Lucas related sequences
	Methods:
		get_KL_m - obtain values for computing K and L using the formula with W_h (begining of RWG section 4)
		get_cUV_i - computes the quartic Lucas sequences (uses get_uv_i (RWG2S), get_KL_m (RWG7S) or
			mpzrz_exp (utils) methods) (RWG section 3)
		get_RST_0 - gets first term of R, S, T sequences (as defined by RWG equations 6.4-6.10)
		get_next_RST_i - gets next term of R, S, T sequences (as defined by RWG equations 6.4-6.10)
		get_RST_i - iteratively finds a term of R, S, T sequences (as defined by RWG equations 6.4-6.10)
		get_ST_0 - gets first term of S, T sequences (as defined in RWG theorem 7.5)
		get_next_ST_i - gets next term of S, T sequences (as defined in RWG theorem 7.5)

roots:
	Functionality:
		methods for finding modular square roots
	Methods:
		verrify_root - check that a modular square root is correct
		c_get_root - find modular square roots using Cipolla's algorithm (uses the mpzrz methods in utils)
		ts_get_root - find modular square roots using the Tonelli-Shanks algorithm
		get_root - find modular square roots, uses simple formulas if applicable then the faster
			of Cipolla's or the Tonelli-Shanks algorithm (dependant on factorization of the modulus-1)
		h_lift_root - uses get_root to find a modular square root (mod p) and uses hensel lifting to find the root mod p^x
	
utils:
	Functionality:
		methods for some algebraic numbers (A + B * sqrt(C)) and some simple algorithms
	Methods:
		mpzrz_mul - multiplication for numbers A + B * sqrt(C)
		mpzrz_sqr - squaring for numbers A + B * sqrt(C)
		mpzrz_exp - exponentiation for numbers A + B * sqrt(C)
		trial_div - trail division for primality for large integers (tests up to first million primes)
		trail_div_small - trail division for small integers (< 15485863)
		gcd - gcd for very small integers (32 bits)
		isSquare - check if input is a perfect square (for 32 bit integers)


